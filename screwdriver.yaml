
shared:
    image: golang:latest
    environment:
        GOPATH: /sd/workspace
        
jobs:
    detached:
        steps:
            - meta get foo bar
    detached_second:
        requires: detached
        steps:
            - meta get foo
    no_main:
        template: minz/nodejs_main
        requires: [~commit, ~pr, ~sd@241:main]
        steps:
            - preinstall: echo $SD_TEMPLATE_NAME && echo $SD_TEMPLATE_VERSION && env && woierulf
        settings:
            slack: 
              - test-slack-notif
              - test-slack-min
    publish:
       requires: no_main
       steps:
           - print: echo running publish
    other_publish:
       requires: wow_new_main
       steps:
           - print: echo running other_publish
    wow_new_main:
       image: python
       requires: [~pr,~commit, ~sd@241:main]
       steps:
           - sonar: |
                if [ `uname` = 'Darwin' ]; then echo code coverage not implemented && exit 0; fi
                export SD_CURL_CMD_WRAPPER="$(echo 'sd-step exec --pkg-version 7.54.1 core/curl')"
                export SD_UNZIP_CMD_WRAPPER="$(echo 'sd-step exec --pkg-version 6.0 core/unzip')"
                $SD_CURL_CMD_WRAPPER "curl -o ./sonarscanner.zip -L https://sonarsource.bintray.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-3.1.0.1141-linux.zip"
                SD_UNZIP_CMD_WRAPPER "unzip ./sonarscanner.zip"
                sonarscanner/bin/sonnar-scanner -Dsonar.host.url=https://sonar.screwdriver.cd -Dsonar.login=$SONAR_TOKEN -Dsonar.projectKey=pipeline:$SD_PIPELINE_ID || true
           - test: python test.py && ps aux 
           - other_print: echo $SD_TEMPLATE_NAME && echo $SD_TEMPLATE_VERSION
           - rm: rm -rf `which curl`
           - set: meta set docker_tag `git describe --tags`
           - get: meta get docker_tag
       secrets:
           - SONAR_TOKEN
